@RestResource(urlMapping='/mergeContacts/*')
global class ContactMergerPoint {
 @HttpPost
    global static MyMergeResponse[] mergeContacts(MyMergeRequest[] request) { 
        System.debug('Start merge Contacts');
        System.debug(request);
        MyMergeResponse[] rsp = new MyMergeResponse[request.size()];
        DG_Contact_Merger_NPSP m = new DG_Contact_Merger_NPSP();
        Integer index = 0;
        for (MyMergeRequest req : request) {
            ID masterId = req.masterRecord.Id;
            ID[] ids = req.recordToMergeIds;
            System.debug(masterId);
            System.debug(ids);
            Contact master = null;
            List<Contact> duplicates =  new List<Contact>();
            
            try {
                // just check if master exists
                master = [SELECT Id, Name FROM Contact WHERE Id=:masterId];
                duplicates = [SELECT Id, Name FROM Contact WHERE Id in :ids];
            } catch (Exception e){
                System.debug(e.getMessage());
                MyError err = new MyError();
                err.statusCode = '500';
                err.message = e.getMessage();
                MyMergeResponse r = new MyMergeResponse();
                r.errors = new MyError[] { err };
                r.success = false;
                r.id = masterId;
                rsp[0] = r;
            }
            System.debug(master);
            System.debug(duplicates);
            if (duplicates.size() > 0 && master != null) {
                    List<Database.MergeResult> result = m.mergeContacts(req.masterRecord, duplicates);
                    for (Database.MergeResult r : result) {
                        MyMergeResponse resp = new MyMergeResponse(r);
                        rsp[index] = resp;                
                        index++;
                    }
            }
        }
        return rsp;
    }
    
    global class MyMergeRequest { 
        public Contact masterRecord { get; set; }
        public ID[] recordToMergeIds { get; set; }
        public Map<String,String> AdditionalInformationMap { get; set; }
    }
    
    global class MyError { 
        public String statusCode { get; set; }
        public String message { get; set; }
        public String[] fields{ get; set; }
    } 
    
    global class MyMergeResponse { 
        public MyError[] errors { get; set; }
        public ID id { get; set; }
        public ID[] mergedRecordIds { get; set; }
        public Boolean success { get; set; }
        public ID[] updatedRelatedIds { get; set; }

        public MyMergeResponse() {

        }

        public MyMergeResponse(Database.MergeResult result) {
           MyError e = new MyError();
           if (result.errors != null && result.errors.size() > 0) {
               e.message = result.errors[0].message;
           }
           this.errors  = new MyError[] { e };
           this.id = result.id ;
           this.mergedRecordIds = result.mergedRecordIds;
           this.success  = result.success;
           this.updatedRelatedIds = result.updatedRelatedIds;
        }
    } 
}